def parse_fasta(data):
    """Parse FASTA format data into a dictionary with labels as keys and DNA strings as values."""
    fasta_dict = {}
    for entry in data:
        if entry.strip():
            lines = entry.strip().split('\n')
            label = lines[0]  # First line is the label
            dna_sequence = ''.join(lines[1:])  # Remaining lines are the DNA sequence
            fasta_dict[label] = dna_sequence
    return fasta_dict

def gc_content(dna):
    """Calculate the GC-content of a DNA string."""
    gc_count = dna.count('G') + dna.count('C')
    return (gc_count / len(dna)) * 100

# Input data in FASTA format
fasta_data = '''>Rosalind_7354
GCCCACCAGCCACACACCATACGTATGCGTTGGACTTAAAATAGGGTGTCTTCCGCAGTC
GGTAGTATTCCCTAACCTTAACGCGGTTCGGACGTTAATGAGAGGCCAGCGTATAACTTC
GGCAGACGTCGTATTGCAAACATTGGTAGCGGTCCCGTTAAGATGCGCCGTAGAATTACG
AACCGGGCGCGTGAACCCTTACTAGGTACAACGGGGGCGTCGGCCCCAACGCAGTGCCTA
GCGAACACCCTACAAAAAGTCGTGGGGCCCCTGGTCGAACCTACACGTGATGGTCTCGCT
ATACGTACGGCGTACTCACTTTAGATTACCCGGGTCGGTAGGCTATGCTAGTTGGGGCTG
GGTATGCTGTCAGCCCAGAGCGGAGCCTAAGGCATTCTACCCTGCAACAGGACAATATCG
CCCTCCATAACGTCTTTAGTATTCAGAATTATGCGACGCCCCGCCCATTTGTTGTGATTA
TCTAGTCACGAGCCAACGTGCACTCCAGAACGTCTCCAAGTGTAACTTCTACCGTCAGAA
GAACCGGGTAGTTGATGGTTAGGACAACCTAGTACTAGACCGTGCAGCGGAGACACAGGT
GAGTATTAGCATAGACTAACGACCGTTGGGTAACCATCCGTCCTCGAGGCTGTCTTTGTA
CCTTGGTGTTCATCGATCCCGATCCACGAGCCTAGAATTAATGTCGTGTCCGGTAACTAC
CGAGGGTGAGGCGCACTGCTCAGACGCCTTTAGAACAACGTGTATCGAGGGGTCCTGGCT
TATAGCCCGTATAAGCATCCCCGGTGTTAAACTACTTCCGGGGGCTAACTTATCATCACG
ACTGCAGTTATAGGATTTCATTCAGTCGGGTTTAACGATTCTGGCATCGTGCACCTAAAT
TGGTCGCCTCGACTCACCTCTTCCCTACTAGCAGCCCTTTGTCCTTTCCCAGCGAATCTA
ACGCCGCATACGCTGTCTGAGGCCAACGGC
>Rosalind_5800
TGTGTCGCGTTGTTCTTGGAGGAGCGCCGTTGAATTGAGTGAAGTCTAAGATACGACCAG
TAACAAGACCCTCTTTGCGCACTAGTGGATATGCCATAGGATGGGTGCGTAGATACAATA
TAGTACGTATATCACCTAATAGAACGGTTCCAACGGTTGCCGCCTGGCCCCCTGACTCGT
TCCGAAAAGACTTGAGGATAGGAGCTTGATTGGTGGAATTTTGGCTCCAGGAGCGTCCAG
CATCGACCTAAAGCAACTATATGAGAGGAGGCCGGTGTGTGCTGTACCCGACCGGGCCCT
TTGAGCTCAACGATCCAGGATACACAAGCACGCTGGGTAAGATCTTCTGACCTTATATGA
AATTCTTGATTGTTTCAGTTGCTAACAACACCCCCATAGTACCGGGTTTCTTCACGAAAA
CTACACGCGGATACTGACTGCCAATCTTTACTAGTCCCGGGCGCTACTTCGATCCTCTGT
TACGTACCGGGGCTAGGGACCCCGCTTAGATTAAATTCTAGGTGTTTGCTGACCTTTTTC
CAGGCCGGCGACCACGTGTTACCGTCCCGATACGCGCCCTCAGTCTTAGACATATGCTTC
CTGGACCCTATTGAGACAGGTACCGCGAGGGCACTGTTCGCCGACTCCACCGTGAGCTCC
CCCGCCCGCGTCGGGGATCCCATAGGCATGATGACAAGCCCGTGGCCCCATGCACCCAAA
GTTGCCGAAGAGCGTCGCCCCTTAGAGTATGACGAGGGCCCATTTTATTCGCGGCGTAAT
TTGGAGGGCATGTCCCCAGTCATGTAATCGTTGCCTTCAGTTCTAAGGCGAAGTATACAA
AACATCAAAGGACTTCCGCTCCGCGCAGATATCAGCGACGTGAGAGAACACTCCAAC
>Rosalind_6515
AACCTTCTTAAACAAGCTAACGAGACGCTGCTCTCTGGGACAGAAGTCGAGCGCCATGAA
GAAGGTTTACGCGTATCATAATCGCACTGTCTATGATAGCATGCATCCTTTCCTGCAAGG
ACATATCCTTAAGATCGGCCTGTCTGTACACCTGAAAACGTCCTTGCCACCAACGATAGT
TTGTCAAACAGAGATACATACTAACTAGCGCTGGGCCTATGACGGTAACACAGCCCTGTA
TGAGTACTTCAGCGGTACTTTAGTAGGCCATAAACCTCTATATCGTGGAGTTACGATATC
TGGCTTACCGCTTACAACCACCGCCCCTATCCTGAAAGCAGTCGGAAGGCGTCTTCAGTG
GCGACTGATCTAGAGAGTCCACTCTACTTTAACCGTCTGTGGGGACCTCTTTTACACGCG
AATATTTATCCGGATCAACAGAATAATTCGGGTTGAATAATCTCTGCCCTGTCCGCCATT
CTGGATTGGCTGATTGATCGCAATTTTTTTCTTGGGTAGTCAACTTATCAACCTGTGCGA
TCGTGATCACACATCATAGTGTTAGTCGGTTCTTCTTCCCACGATTTTCGACGCGCTATG
GCCACCTATATTCCAGCGAATTCGTGGGATGATAAGGCTGACAATTAAGCCTAAGCCCGC
GGCTCAAATTTGATCAAACATTTGGAAGCTAGTACCGACCATTTCCCGCTATACGGCGCC
TTAGTTCCTCGAGTCGTGGGTGAGCTTATTGGATCGAATACGTTGCCAAGGTGGATTCTC
ATTCTCGCCTTCAAGGAAGCTAATAGATACTTACATATGGAATTGCAATATAGTAACATC
ACGGGAGGTCAATTTTTAGTAAGCCTATCTAGTACCACGTCGAGCCTCGCAGGGTTATTT
CGGACGTTCAGTAAGCCTTCGACAGTTTCCCGACAGAAAAGAACAAGTGACGCTTATACC
GTTGGTTTCG
>Rosalind_1353
GACTGATAGAATCACTCTCTTTCTGAACCATGTGTTACATGGTGGGGGGCAGGGGGCCAC
GTTCGTTTCGGGAACTCGCCCGGTACGGCGCCAGGTTGAATCGTTTAACACACGAGGTAG
TTTACACGTATCGAACGTTAGACGTGTCACCGGATAGTCAAGTTGCCTCCCGTCCCAAGA
GCGATTCGTACTATATAGTTTGTTCTTAAGTAGGCCCATCAAGACAGGGCCTTGAAGTGA
ACCAGGCGGCCACCGTCATTTTAACGAAGGCCCTAGAATCAATCTGAGCATCCAGGTAGA
TACCACCACCTTTAACAAGCATCCGCCTGCTGGCGGCTGCCGGGCGACCGTCCTTAACAC
CCGTCCCACTGTTAATGTCCACGAGCGTACTGAACAGTCACTCATGCTCACATCTCTTCG
GATTTCGGGTACCAAGTCTTGGCGCGAACCCTTGTAGAGACAACTGTACAATGGCTAGTG
CTGTGAAGAGCTCGATGGGCTGGTCTTCTCAATAAGTACGTTGCCGAACGGATTGACAAC
TCCGCTTAGAGCGGAACTGTAAGCGGCCGTTGGATTAGTGCCTCCTGACTCGTTGAACCA
ATCCCTGCGACTGGGTAATACATCTCTGAGACGATGGCCGAGACACGGTCGTGATCTGTC
CGTCGGGGGCGCGCAGTGAGGAGCCCATCAACCGGGGCGATACTGTGGAGCCGGTACAGA
TGCCTTTATCTGGGAGTTCACCATCCATGCAGAGTCGTGCTAGACCGCTAGTGAGAGGGT
CAGATGTGTCCCCTCGTATTTTCCGGGCACTTGGTTGTTTATAAGGGAGGAGCGATAGGT
TCTGTCGGACACTTGGCGCAGACCCCAGTCTGCATAGGTTAGATCGACGTGCGGTCGAAG
GACTTTCCGGCTCGTCTGGTCTGCGAGTGCTCTACCTAGCGGGCCTTGGTACGA
>Rosalind_5834
ATTTCAGCGATGTCGGGGGTGATTGCGAGCTGACCGTTTGTTGAGTGCATCTACCGCGAG
GGTCGGTACCGGACAGCTCCCAACCGCTACCCGAGCCTGGGAGGTTTCCTCAACATCATT
TTCAAGATGAACTTGCAACTAGACTTCGCAGGCTTGCAAAATTAACGTTTGTTCAACTGG
AAACTCACCTCCCTACATTACCCCGTGTTTCGTTTTATGCGGATGATTTCGACGCATGCA
ATCATACCCCCAACGCTTAGTGAAAACGAGGCGAAGAGAGCACGACAGGAAGCTATGCGT
AACGGATGCGAGTGCCGCGTGTAAAAACTAATGATTTGAGCAAGACAGAAGACGTGAGAG
CGATTAGTGAGCCATGTTACATTTGTCTACGCGTATGTTTAGGAATGTTGCGGTGCTGAA
CAGAACTATGAACCCAGTAGCGGTATTGTTAACAGGTCCGCAGTCGTTATCAGAAAACCC
GGTGCACTTTTCGATCCGGGAGACGCCGGTTGACGATTGGCCCTAGCTGTATTTCTCGCT
AGAATTTGGTGCCGTCCCATCGGTGCGTAGTGTGTTGCATTCAGTCGTCTAATGCACGTA
GCTGCGTTGGGGTTGCTAGATATAATACCACTGCTACGGTCATAAGTAGCGTGCACCCCA
ACTTTCGGTCCCGGGTTCGACTCTCTAACGTTACTCCACCCTATTTGGCGCGTAAACCAG
AACGGTAGAGCCGGGACGGGCTGCATCTCCCCATGACTCTTTGAGCGGTGTTCGCTCTCG
CCCGTGGGTGCTGTGGGTCCTCAGTGCCTATAATAGGCCTCCGCTGCACTTTGCGTGTAA
GGAGACACCAGCCGCTCAGTACTATCGAGTATACACTGGTGCGGACAAAATTGAGCTCGG
AGGTCTGGTGTACGGAGAACTCGATAAACGTACTCATCACCTAACCCCCCATTACCAGGC
GGGGGTGCCACGAT
'''.split('>')

# Parse the input data
fasta_dict = parse_fasta(fasta_data)

# Calculate GC-content for each DNA string and find the maximum
max_label = None
max_gc_content = 0

for label, dna in fasta_dict.items():
    content = gc_content(dna)
    if content > max_gc_content:
        max_label = label
        max_gc_content = content

# Output the label and the highest GC-content
print(max_label)
print(f"{max_gc_content:.6f}")


